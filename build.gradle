plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.2'
	id 'io.spring.dependency-management' version '1.1.4'
	id 'jacoco'
	id 'org.sonarqube' version '4.0.0.2929'
	id "com.github.node-gradle.node" version "7.0.2"
}

group = 'nz.ac.canterbury.seng302.team-900'
version = '3.0.0'
sourceCompatibility = '17'

repositories {
	mavenCentral()
}

jacoco {
	toolVersion = "0.8.9"
}

// Livestreaming

node {
	download = true
}

clean {
	delete "node_modules"
}

tasks.register("buildWeb", NpxTask) {
	dependsOn("installNpm")
	command = "npx"
	args = ["webpack"]
}


bootRun {
	dependsOn("buildWeb")
}




dependencies {
	// Spring
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.security:spring-security-test'
	implementation 'org.springframework.boot:spring-boot-starter-mail'

	// Database
	implementation 'com.h2database:h2'
	implementation 'org.mariadb.jdbc:mariadb-java-client:3.3.3'

	// Cucumber
	testImplementation 'io.cucumber:cucumber-java:7.15.0'
	testImplementation 'io.cucumber:cucumber-spring:7.15.0'
	testImplementation 'io.cucumber:cucumber-junit-platform-engine:7.15.0'
	testImplementation 'org.junit.platform:junit-platform-suite:1.10.2'

	// Spring Test
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// Bootstrap
	implementation 'org.webjars:bootstrap:5.3.3'

	// Spring Boot Starter WebSocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	// Spring Boot Starter Web
	implementation 'org.springframework.boot:spring-boot-starter-web'

	// STOMPjs for Live Chat
	implementation 'org.webjars.npm:stomp__stompjs:7.0.0'


}


node {
	download = true
}

tasks.register("installNpm", NpxTask) {
	command = "npm"
	args = ["install"]
}

clean {
	delete "node_modules"
}


// Gradlew check
tasks.named("check") {
	dependsOn test, integration, cucumber
}

// Unit tests
tasks.named('test') {

	// Use JUnit Platform for unit tests
	useJUnitPlatform()

	// Test location
	filter {
		includeTestsMatching "nz.ac.canterbury.seng302.gardenersgrove.unit.*"
	}

	// Events
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}

	// Generate report
	finalizedBy "unitTestReport"
}

// Integration tests
tasks.register("integration", Test) {

	// Use JUnit Platform for unit tests
	useJUnitPlatform()

	// Test location
	filter{
		includeTestsMatching "nz.ac.canterbury.seng302.gardenersgrove.integration.*"
	}

	// Events
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}

	// Generate report
	finalizedBy "integrationTestReport"
}

// Cucumber tests
tasks.register("cucumber", Test) {

	// Use JUnit Platform for unit tests
	useJUnitPlatform()

	// Test location
	filter {
		includeTestsMatching "nz.ac.canterbury.seng302.gardenersgrove.cucumber.*"
	}

	// Events
	testLogging {
		events "passed", "skipped", "failed", "standardOut", "standardError"
	}

	// Generate report
	finalizedBy "cucumberTestReport"
}

///// REPORTS /////

tasks.register("unitTestReport", JacocoReport) {
	group = 'verification'

	onlyIf {
		return !project.hasProperty('skipTestReport')
	}

	dependsOn test

	executionData project.tasks.test

	sourceDirectories.setFrom(project.files(project.sourceSets.main.allSource.srcDirs))
	classDirectories.setFrom(project.sourceSets.main.output)

	reports {
		html.destination file("${buildDir}/reports/coverage/test")
	}
}

tasks.register("integrationTestReport", JacocoReport) {
	group = 'verification'

	onlyIf {
		return !project.hasProperty('skipTestReport')
	}

	dependsOn integration

	executionData project.tasks.integration

	sourceDirectories.setFrom(project.files(project.sourceSets.main.allSource.srcDirs))
	classDirectories.setFrom(project.sourceSets.main.output)

	reports {
		html.destination file("${buildDir}/reports/coverage/integration")
	}
}

tasks.register("cucumberTestReport", JacocoReport) {
	group = 'verification'

	onlyIf {
		return !project.hasProperty('skipTestReport')
	}

	dependsOn cucumber

	executionData project.tasks.cucumber

	sourceDirectories.setFrom(project.files(project.sourceSets.main.allSource.srcDirs))
	classDirectories.setFrom(project.sourceSets.main.output)

	reports {
		html.destination file("${buildDir}/reports/coverage/cucumber")
	}
}

// Make test reports
jacocoTestReport {

	onlyIf {
		return !project.hasProperty('skipTestReport')
	}

	mustRunAfter test, integration, cucumber

	executionData fileTree(project.rootDir) {
		include '**/*.exec'
	}

	reports {
		xml.required = true
		xml.destination = file("$buildDir/jacoco/test-report.xml")
		html.destination file("${buildDir}/reports/coverage/overall")
	}
}

// SonarQube
sonar {
	properties {
		property "sonar.projectKey", "seng302-2024-team900"
		property "sonar.projectName", "seng302-2024-team900"
		property "sonar.sourceEncoding", "UTF-8"
		property "sonar.host.url", "https://sonarqube.csse.canterbury.ac.nz"
		property "sonar.login", "$System.env.SONARQUBE_TOKEN"

		//
		if(System.env.CI_MERGE_REQUEST_IID == null || System.env.CI_MERGE_REQUEST_IID.trim().isEmpty()) {
			property "sonar.branch.name", "$System.env.CI_COMMIT_REF_NAME"
		}

		else {
			property "sonar.pullrequest.key", "$System.env.CI_MERGE_REQUEST_IID"
			property "sonar.pullrequest.branch", "$System.env.CI_MERGE_REQUEST_SOURCE_BRANCH_NAME"
			property "sonar.pullrequest.base", "$System.env.CI_MERGE_REQUEST_TARGET_BRANCH_NAME"
		}
	}
}

// Configure reports
tasks.named("unitTestReport").configure { finalizedBy "jacocoTestReport" }
tasks.named("integrationTestReport").configure { finalizedBy "jacocoTestReport" }
tasks.named("cucumberTestReport").configure { finalizedBy "jacocoTestReport" }

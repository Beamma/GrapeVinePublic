stages:
  - tagChecking
  - build
  - test
  - sonarqube
  - deploy

workflow:
  rules:
    - if: '$CI_COMMIT_TAG'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
    - if: '$CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUEST'
      when: never
    - if: '$CI_COMMIT_BRANCH'


##### TAG CHECKING #####

tag-checker:
  stage: tagChecking
  script:
    - python3 tag_checker.py $CI_COMMIT_TAG
  only:
    - tags

##### BUILD #####

branch-build:
  stage: build
  script:
    - ./gradlew bootJar
  artifacts:
    paths:
      - build/libs
  except:
    - tags
    - main
    - dev

##### TEST #####

# Caching
cache:
  key: "$CI_JOB_NAME"
  paths:
    - ~/.gradle/caches/
    - ~/.gradle/wrapper/

# Unit
junit:
  stage: test
  script:
    - ./gradlew test
  artifacts:
    paths:
      - build/jacoco/test.exec

# Integration
integration-tests:
  stage: test
  script:
    - ./gradlew integration
  artifacts:
    paths:
      - build/jacoco/integration.exec

# Cucumber
integration-cucumber:
  stage: test
  script:
    - ./gradlew cucumber
  artifacts:
    paths:
      - build/jacoco/cucumber.exec

# Run in Parallel
.parallel-test:
  stage: test
  script:
    - echo "Running tests in parallel"
  artifacts:
    paths:
      - build/jacoco/test.exec
      - build/jacoco/integration.exec
      - build/jacoco/cucumber.exec
.include:
  - junit
  - integration-tests
  - integration-cucumber

##### SONARQUBE #####

sonarqube-report:
  stage: sonarqube
  script:
    - ./gradlew jacocoTestReport
    - ./gradlew sonar
  dependencies:
    - junit
    - integration-tests
    - integration-cucumber
  artifacts:
    paths:
      - build/jacoco/test-report.xml

##### DEPLOYMENT SCRIPTS #####

deploy-staging:
  stage: deploy
  script:
    - ./gradlew bootJar
    - rm -rf /home/gitlab-runner/staging/ || true
    - mkdir /home/gitlab-runner/staging/
    - cp -r ./build/libs /home/gitlab-runner/staging
    - cp runner-scripts/staging.sh /home/gitlab-runner/staging.sh
    - chmod u+x /home/gitlab-runner/staging.sh
    - echo "export DB_USERNAME=${DB_USERNAME}">/home/gitlab-runner/staging/.env
    - echo "export DB_PASSWORD=${DB_PASSWORD}">>/home/gitlab-runner/staging/.env
    - echo "export WEATHER_API_KEY=${WEATHER_API_KEY}">>/home/gitlab-runner/staging/.env
    - echo "export EMAIL_USERNAME=${EMAIL_USERNAME}">>/home/gitlab-runner/staging/.env
    - echo "export EMAIL_PASSWORD=\"${EMAIL_PASSWORD}\"">>/home/gitlab-runner/staging/.env
    - echo "export SONARQUBE_TOKEN=${SONARQUBE_TOKEN}">>/home/gitlab-runner/staging/.env
    - echo "export LOCATION_API_KEY=${LOCATION_API_KEY}">>/home/gitlab-runner/staging/.env
    - echo "export PROFANITY_FILTER_API_KEY=${PROFANITY_FILTER_API_KEY}">>/home/gitlab-runner/staging/.env
    - echo "export AGORA_APP_ID=${AGORA_APP_ID}">>/home/gitlab-runner/staging/.env
    - echo "export AGORA_CERT=${AGORA_CERT}">>/home/gitlab-runner/staging/.env
    - echo "export CUSTOMER_KEY=${CUSTOMER_KEY}">>/home/gitlab-runner/staging/.env
    - echo "export CUSTOMER_SECRET=${CUSTOMER_SECRET}">>/home/gitlab-runner/staging/.env
    # Ensure your application reads the .env file from the correct location
    - export $(cat /home/gitlab-runner/staging/.env | xargs)
    - sudo systemctl restart staging
  artifacts:
    paths:
      - build/libs
  only:
    - dev

deploy-production:
  stage: deploy
  script:
    - ./gradlew bootJar
    - rm -rf /home/gitlab-runner/production/ || true
    - mkdir /home/gitlab-runner/production/
    - cp -r ./build/libs /home/gitlab-runner/production
    - cp runner-scripts/production.sh /home/gitlab-runner/production.sh
    - chmod u+x /home/gitlab-runner/production.sh
    - echo "export DB_USERNAME=${DB_USERNAME}">/home/gitlab-runner/production/.env
    - echo "export DB_PASSWORD=${DB_PASSWORD}">>/home/gitlab-runner/production/.env
    - echo "export WEATHER_API_KEY=${WEATHER_API_KEY}">>/home/gitlab-runner/production/.env
    - echo "export EMAIL_USERNAME=${EMAIL_USERNAME}">>/home/gitlab-runner/production/.env
    - echo "export EMAIL_PASSWORD=\"${EMAIL_PASSWORD}\"">>/home/gitlab-runner/production/.env
    - echo "export SONARQUBE_TOKEN=${SONARQUBE_TOKEN}">>/home/gitlab-runner/production/.env
    - echo "export LOCATION_API_KEY=${LOCATION_API_KEY}">>/home/gitlab-runner/production/.env
    - echo "export PROFANITY_FILTER_API_KEY=${PROFANITY_FILTER_API_KEY}">>/home/gitlab-runner/production/.env
    - echo "export AGORA_APP_ID=${AGORA_APP_ID}">>/home/gitlab-runner/production/.env
    - echo "export AGORA_CERT=${AGORA_CERT}">>/home/gitlab-runner/production/.env
    - echo "export CUSTOMER_KEY=${CUSTOMER_KEY}">>/home/gitlab-runner/production/.env
    - echo "export CUSTOMER_SECRET=${CUSTOMER_SECRET}">>/home/gitlab-runner/production/.env
    # Ensure your application reads the .env file from the correct location
    - export $(cat /home/gitlab-runner/production/.env | xargs)
    - sudo systemctl restart production
  artifacts:
    paths:
      - build/libs
  only:
    - tags